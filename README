# Distributed Computing Demo: Ray vs Celery vs Kafka

This repository contains **three different implementations** of distributed computing using:
- [Ray](https://ray.io/)
- [Celery](https://docs.celeryq.dev/)
- [Kafka](https://kafka.apache.org/)

Each implementation is contained in its respective directory:
- `ray/`
- `celery/`
- `kafka/`

The goal of this project is to **compare these frameworks** and understand their **best use cases** for distributed systems.

---

## üöÄ **High-Level Comparison: Ray vs Celery vs Kafka**
Each of these frameworks is designed for **different types of distributed workloads**. Here‚Äôs how they compare:

| Framework  | Best Suited For | Task Model | Scalability | Ease of Use |
|------------|---------------|------------|-------------|-------------|
| **Ray**    | Parallel processing, ML workloads, Python-native distributed tasks | Actor-based and task-based | High (auto-scaling workers) | Easy |
| **Celery** | Task queues, background jobs, distributed workers | Task queue-based | Moderate (requires message broker like Redis/RabbitMQ) | Easy |
| **Kafka**  | Event-driven architectures, real-time data streaming | Publish-subscribe | High (designed for massive-scale streaming) | Moderate |

---

## üìå **Prerequisites**
Before running any of the implementations, ensure you have:
- [Docker](https://www.docker.com/)
- [Docker Compose](https://docs.docker.com/compose/)

---

## ‚ö° **Ray Implementation**
The `ray/` directory contains an example of **distributed computation using Ray**.

### üîπ **How to Run the Ray Example**
1Ô∏è‚É£ **Start the Ray cluster**:
```bash
docker compose -f ray/docker-compose.yml up -d
```
2Ô∏è‚É£ Verify the Ray cluster is running:
```bash
ray status --address=localhost:6379
```
3Ô∏è‚É£ Expected Output: You should see logs indicating distributed tasks were processed:
```bash
All tasks completed:
Processed Task-0
Processed Task-1
Processed Task-2
...
```
4Ô∏è‚É£ To Shut Down the Cluster:
```bash
docker compose -f ray/docker-compose.yml down
```

---
## üõ†Ô∏è **Next Steps**
- Celery Implementation (Coming Soon)
- Kafka Implementation (Coming Soon)
